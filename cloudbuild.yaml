steps:

- id: Get Cloud Run backends URLs 
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: 
  - '-c'
  - | 
      export TF_VAR_user_service_url=$(gcloud run services describe \
        user-service-${_ENVIRONMENT} \
        --region ${_LOCATION} \
        --format 'value(status.url)')
      export TF_VAR_post_service_url=$(gcloud run services describe \
        post-service-${_ENVIRONMENT} \
        --region ${_LOCATION} \
        --format 'value(status.url)')
      export TF_VAR_notification_service_url=$(gcloud run services describe \
        notification-service-${_ENVIRONMENT} \
        --region ${_LOCATION} \
        --format 'value(status.url)')

      echo "export TF_VAR_user_service_url=$TF_VAR_user_service_url" >> /workspace/backends_urls.env
      echo "export TF_VAR_post_service_url=$TF_VAR_post_service_url" >> /workspace/backends_urls.env
      echo "export TF_VAR_notification_service_url=$TF_VAR_notification_service_url" >> /workspace/backends_urls.env

- id: 'Prepare and apply Terraform migration'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "environments/$BRANCH_NAME/" ]; then
        cd environments/$BRANCH_NAME

        export TF_VAR_project_id=$PROJECT_ID
        export TF_VAR_environment=$BRANCH_NAME
        source /workspace/backends_urls.env

        terraform init
        terraform fmt -check
        terraform validate
        terraform plan
        terraform apply -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi 
options:
  logging: CLOUD_LOGGING_ONLY
timeout: "1600s"
